import os
import requests
import discord
from discord.ext import tasks
from dotenv import load_dotenv

# üîπ Carregar vari√°veis de ambiente (.env)
load_dotenv()
ETHERSCAN_API_KEY = os.getenv("ETHERSCAN_API_KEY")  # Chave da API Etherscan

# üîπ Fun√ß√£o para buscar a taxa de Gwei via API da Etherscan
async def fetch_gas_price():
    url = f"https://api.etherscan.io/api?module=gastracker&action=gasoracle&apikey={ETHERSCAN_API_KEY}"
    
    try:
        response = requests.get(url, timeout=10)
        response.raise_for_status()
        data = response.json()

        if data["status"] == "1" and "result" in data:
            safe_gwei = float(data["result"]["SafeGasPrice"])      # Baixo
            propose_gwei = float(data["result"]["ProposeGasPrice"]) # M√©dio
            fast_gwei = float(data["result"]["FastGasPrice"])      # Alto
            
            return propose_gwei, safe_gwei, fast_gwei
        else:
            print(f"‚ùå Erro na resposta da Etherscan: {data}")
            return None, None, None
    except requests.RequestException as e:
        print(f"‚ùå Erro ao buscar pre√ßo do Gwei: {e}")
        return None, None, None

# üîπ Determinar o n√≠vel do Gwei com base na API da Etherscan
def get_gwei_indicator(gwei_price, safe_gwei, propose_gwei, fast_gwei):
    if gwei_price >= fast_gwei:
        return "üî¥ ‚ÜóÔ∏è"
    elif gwei_price >= safe_gwei:
        return "üü¢ ‚ÜòÔ∏è"
    #else:
        return "üü¢ ‚ÜòÔ∏è"

# üîπ Fun√ß√£o para buscar pre√ßo de token na API da Binance
async def fetch_token_price(symbol):
    symbol = symbol.lower()

    if symbol == "gweieth":
        print("‚úÖ Buscando Gwei na Etherscan (n√£o na Binance)")
        propose_gwei, _, _ = await fetch_gas_price()
        return propose_gwei

    url = f"https://api.binance.com/api/v3/ticker/price?symbol={symbol.upper()}"
    try:
        print(f"üì° Fazendo requisi√ß√£o para Binance: {url}")  # Debug
        response = requests.get(url, timeout=10)
        response.raise_for_status()
        data = response.json()
        return float(data.get("price", 0))
    except requests.RequestException as e:
        print(f"‚ùå Erro ao buscar pre√ßo do {symbol}: {e}")
        return None

# üîπ Comando para adicionar um canal de g√°s (Gwei)
async def add_gas_channel(interaction: discord.Interaction, bot):
    guild = interaction.guild

    overwrites = {
        guild.default_role: discord.PermissionOverwrite(connect=False),
        guild.me: discord.PermissionOverwrite(manage_channels=True, view_channel=True, connect=True, speak=True)
    }

    # Criar canal tempor√°rio com nome inicial
    new_channel = await guild.create_voice_channel(name="‚õΩ Gwei: Carregando...", overwrites=overwrites)
    
    # Buscar pre√ßo do g√°s usando a Etherscan
    propose_gwei, safe_gwei, fast_gwei = await fetch_gas_price()
    if propose_gwei is not None:
        indicator = get_gwei_indicator(propose_gwei, safe_gwei, propose_gwei, fast_gwei)
        new_channel_name = f"{indicator} GAS: {propose_gwei:.2f} Gwei"
        try:
            await new_channel.edit(name=new_channel_name)
            print(f"‚úÖ Canal de g√°s criado: {new_channel_name}")
        except discord.Forbidden:
            print("‚ùå Permiss√£o negada para editar o nome do canal.")
        except discord.HTTPException as e:
            print(f"‚ùå Erro ao editar o nome do canal: {e}")
    
    # Salvar ID do canal para atualiza√ß√µes futuras
    bot.tracked_tokens[("gwei", "eth")] = new_channel.id
    return new_channel.id

# üîπ Atualiza√ß√£o autom√°tica do canal de g√°s (a cada 10 minutos)
@tasks.loop(seconds=350)
async def update_gas_channel(bot):
    await bot.wait_until_ready()
    
    # Verificar se o canal de Gwei foi criado
    if ("gwei", "eth") in bot.tracked_tokens:
        channel_id = bot.tracked_tokens[("gwei", "eth")]
        channel = bot.get_channel(channel_id)
        
        if channel is None:
            print(f"‚ùå Canal de g√°s n√£o encontrado (ID: {channel_id}). Removendo da lista.")
            bot.tracked_tokens.pop(("gwei", "eth"), None)
            return
        
        # Buscar nova taxa de Gwei usando a Etherscan
        propose_gwei, safe_gwei, fast_gwei = await fetch_gas_price()
        if propose_gwei is not None:
            indicator = get_gwei_indicator(propose_gwei, safe_gwei, propose_gwei, fast_gwei)
            new_channel_name = f"{indicator} GAS: {propose_gwei:.2f} Gwei"
            try:
                await channel.edit(name=new_channel_name)
                print(f"‚úÖ Atualizado para: {new_channel_name}")
            except discord.Forbidden:
                print("‚ùå Sem permiss√£o para editar canal.")
            except discord.HTTPException as e:
                print(f"‚ùå Erro ao editar canal: {e}")